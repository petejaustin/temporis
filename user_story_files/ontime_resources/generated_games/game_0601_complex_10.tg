// Complex graph with 10 nodes

node s0: label["start"], owner[0]
node s1: label["b"], owner[1]
node s2: label["c"], owner[1]
node s3: label["d"], owner[0]
node s4: label["n4"], owner[0]
node s5: label["f"], owner[0]
node s6: label["g"], owner[0]
node s7: label["state7"], owner[0]
node s8: label["i"], owner[0]
node s9: label["target"], owner[0]

edge s0 -> s6
edge s1 -> s2: (and (= (mod t 2) 1) (= (mod t 3) 0))
edge s2 -> s1: (or (= (mod t 4) 0) (= (mod t 2) 0))
edge s2 -> s4: (17)
edge s2 -> s8: (10,20,22)
edge s2 -> s9: (and (= (mod t 2) 0) (= (mod t 3) 2))
edge s3 -> s2
edge s3 -> s7: (and (= (mod t 3) 0) (= (mod t 3) 2))
edge s4 -> s7: (= (mod t 7) 0)
edge s5 -> s0: (and (= (mod t 4) 0) (= (mod t 5) 3))
edge s5 -> s3: (and (= (mod t 3) 2) (= (mod t 3) 2))
edge s5 -> s7
edge s6 -> s2: (= (mod t 5) 0)
edge s6 -> s5: (not (= (mod t 4) 0))
edge s7 -> s1: (or (= (mod t 4) 1) (= (mod t 4) 2))
edge s7 -> s2: (= (mod t 7) 3)
edge s7 -> s9: (or (= (mod t 5) 1) (= (mod t 4) 2))
edge s8 -> s6: (= (mod t 7) 0)
edge s9 -> s3
edge s9 -> s4: (1)
edge s9 -> s5: (16)
edge s9 -> s6: (and (= (mod t 4) 3) (= (mod t 3) 1))
edge s9 -> s8: (or (= (mod t 4) 3) (= (mod t 5) 2))
