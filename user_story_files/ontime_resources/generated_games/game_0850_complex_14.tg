// Complex graph with 14 nodes

node s0: label["start"], owner[1]
node s1: label["n1"], owner[0]
node s2: label["state2"], owner[1]
node s3: label["state3"], owner[0]
node s4: label["n4"], owner[0]
node s5: label["state5"], owner[0]
node s6: label["n6"], owner[1]
node s7: label["state7"], owner[0]
node s8: label["n8"], owner[1]
node s9: label["j"], owner[1]
node s10: label["state10"], owner[0]
node s11: label["l"], owner[1]
node s12: label["state12"], owner[0]
node s13: label["target"], owner[0]

edge s0 -> s3
edge s0 -> s4: (and (= (mod t 2) 1) (= (mod t 3) 0))
edge s0 -> s8: (or (= (mod t 5) 2) (= (mod t 2) 1))
edge s1 -> s5: (not (= (mod t 4) 3))
edge s1 -> s8: (= (mod t 3) 2)
edge s1 -> s12: (= (mod t 8) 0)
edge s2 -> s1
edge s2 -> s5
edge s2 -> s6: (20)
edge s2 -> s9
edge s2 -> s11: (4,5,9,16)
edge s3 -> s2: (or (= (mod t 4) 0) (= (mod t 2) 1))
edge s3 -> s11
edge s3 -> s12: (3,11,15,17)
edge s4 -> s0: (not (= (mod t 5) 1))
edge s4 -> s11: (and (= (mod t 4) 3) (= (mod t 3) 2))
edge s4 -> s13: (8,11,12,14,16)
edge s5 -> s0
edge s5 -> s1: (and (= (mod t 2) 1) (= (mod t 5) 1))
edge s5 -> s3: (and (= (mod t 3) 0) (= (mod t 4) 0))
edge s5 -> s4: (and (= (mod t 4) 0) (= (mod t 3) 0))
edge s5 -> s11: (2,12,15,16)
edge s5 -> s13: (= (mod t 3) 2)
edge s6 -> s8: (= (mod t 2) 1)
edge s6 -> s13: (not (= (mod t 5) 4))
edge s7 -> s1: (= (mod t 5) 0)
edge s7 -> s5: (3,8,9,14,18)
edge s7 -> s6: (or (= (mod t 4) 2) (= (mod t 2) 0))
edge s7 -> s11: (= (mod t 5) 3)
edge s7 -> s13: (20)
edge s8 -> s0: (and (= (mod t 2) 1) (= (mod t 3) 1))
edge s8 -> s5: (and (= (mod t 3) 1) (= (mod t 5) 0))
edge s8 -> s7: (and (= (mod t 3) 1) (= (mod t 3) 1))
edge s8 -> s11: (= (mod t 8) 2)
edge s8 -> s13
edge s9 -> s0: (not (= (mod t 4) 3))
edge s9 -> s1: (not (= (mod t 3) 2))
edge s9 -> s6
edge s9 -> s7: (not (= (mod t 6) 5))
edge s9 -> s10
edge s9 -> s11: (5)
edge s10 -> s2: (= (mod t 8) 7)
edge s10 -> s3
edge s10 -> s11: (and (= (mod t 4) 0) (= (mod t 5) 0))
edge s11 -> s7: (not (= (mod t 5) 3))
edge s11 -> s8: (not (= (mod t 4) 2))
edge s11 -> s9
edge s12 -> s1
edge s12 -> s3: (or (= (mod t 2) 1) (= (mod t 5) 4))
edge s12 -> s5: (not (= (mod t 6) 5))
edge s12 -> s7: (= (mod t 4) 0)
edge s12 -> s8: (not (= (mod t 4) 2))
edge s12 -> s9
edge s12 -> s10: (and (= (mod t 4) 0) (= (mod t 5) 3))
edge s13 -> s1: (1,2,7)
edge s13 -> s9: (3,14,19)
edge s13 -> s12: (not (= (mod t 4) 2))
