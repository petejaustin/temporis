// Complex graph with 12 nodes

node s0: label["start"], owner[0]
node s1: label["b"], owner[0]
node s2: label["n2"], owner[1]
node s3: label["n3"], owner[1]
node s4: label["n4"], owner[1]
node s5: label["f"], owner[1]
node s6: label["g"], owner[0]
node s7: label["h"], owner[1]
node s8: label["state8"], owner[0]
node s9: label["j"], owner[0]
node s10: label["state10"], owner[1]
node s11: label["target"], owner[1]

edge s1 -> s2
edge s1 -> s4: (not (= (mod t 5) 1))
edge s1 -> s5: (or (= (mod t 3) 2) (= (mod t 3) 0))
edge s1 -> s7: (= (mod t 2) 0)
edge s1 -> s9: (and (= (mod t 2) 1) (= (mod t 4) 0))
edge s2 -> s1: (4,7,10,19,24)
edge s2 -> s4: (or (= (mod t 2) 0) (= (mod t 5) 2))
edge s2 -> s7: (and (= (mod t 2) 1) (= (mod t 5) 4))
edge s2 -> s8: (= (mod t 8) 1)
edge s2 -> s10: (= (mod t 2) 1)
edge s3 -> s8: (and (= (mod t 3) 2) (= (mod t 5) 2))
edge s4 -> s1: (4,5,24,28)
edge s4 -> s2: (or (= (mod t 3) 1) (= (mod t 3) 0))
edge s4 -> s7: (or (= (mod t 2) 0) (= (mod t 5) 2))
edge s4 -> s9: (= (mod t 7) 5)
edge s4 -> s11: (and (= (mod t 3) 0) (= (mod t 4) 2))
edge s5 -> s7: (0,15)
edge s5 -> s8: (= (mod t 8) 4)
edge s5 -> s10: (13,16,17)
edge s6 -> s2: (or (= (mod t 3) 2) (= (mod t 3) 1))
edge s6 -> s9: (and (= (mod t 2) 1) (= (mod t 5) 1))
edge s7 -> s2: (and (= (mod t 3) 1) (= (mod t 5) 2))
edge s7 -> s3: (or (= (mod t 3) 2) (= (mod t 4) 0))
edge s7 -> s4: (not (= (mod t 5) 2))
edge s7 -> s5: (or (= (mod t 2) 1) (= (mod t 3) 1))
edge s7 -> s6: (not (= (mod t 4) 2))
edge s8 -> s2: (not (= (mod t 6) 1))
edge s8 -> s3: (and (= (mod t 2) 1) (= (mod t 3) 0))
edge s8 -> s10: (5,17,22)
edge s9 -> s0: (= (mod t 7) 1)
edge s9 -> s4: (= (mod t 7) 6)
edge s9 -> s7: (not (= (mod t 5) 4))
edge s9 -> s11: (or (= (mod t 3) 1) (= (mod t 4) 1))
edge s10 -> s1: (or (= (mod t 4) 1) (= (mod t 5) 1))
edge s10 -> s3
edge s10 -> s11: (and (= (mod t 2) 1) (= (mod t 3) 1))
edge s11 -> s1: (or (= (mod t 5) 3) (= (mod t 4) 2))
edge s11 -> s4
edge s11 -> s10: (and (= (mod t 3) 2) (= (mod t 3) 0))
