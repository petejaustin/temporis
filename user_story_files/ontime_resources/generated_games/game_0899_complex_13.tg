// Complex graph with 13 nodes

node s0: label["start"], owner[1]
node s1: label["n1"], owner[0]
node s2: label["c"], owner[0]
node s3: label["d"], owner[0]
node s4: label["n4"], owner[1]
node s5: label["n5"], owner[0]
node s6: label["state6"], owner[1]
node s7: label["state7"], owner[0]
node s8: label["i"], owner[1]
node s9: label["j"], owner[1]
node s10: label["state10"], owner[1]
node s11: label["state11"], owner[1]
node s12: label["target"], owner[1]

edge s0 -> s1: (= (mod t 2) 1)
edge s0 -> s8: (3,18,20)
edge s0 -> s9: (= (mod t 8) 7)
edge s0 -> s11
edge s1 -> s4: (and (= (mod t 2) 1) (= (mod t 3) 1))
edge s1 -> s9
edge s1 -> s12: (2,7,25)
edge s2 -> s0: (and (= (mod t 4) 3) (= (mod t 5) 1))
edge s2 -> s1: (= (mod t 6) 2)
edge s2 -> s4
edge s3 -> s0: (and (= (mod t 2) 1) (= (mod t 3) 1))
edge s3 -> s2: (not (= (mod t 2) 0))
edge s3 -> s6: (and (= (mod t 2) 0) (= (mod t 5) 2))
edge s3 -> s7: (not (= (mod t 2) 1))
edge s4 -> s2
edge s4 -> s6: (2,3,12,14,17)
edge s4 -> s9: (= (mod t 5) 0)
edge s5 -> s3: (not (= (mod t 3) 0))
edge s5 -> s9: (= (mod t 4) 3)
edge s6 -> s0: (12,16,20,24)
edge s6 -> s5: (and (= (mod t 4) 0) (= (mod t 4) 2))
edge s6 -> s8: (= (mod t 8) 4)
edge s6 -> s11: (8,20)
edge s7 -> s0: (and (= (mod t 2) 0) (= (mod t 5) 4))
edge s7 -> s1
edge s7 -> s4: (= (mod t 2) 0)
edge s7 -> s5: (and (= (mod t 3) 0) (= (mod t 3) 1))
edge s7 -> s9: (16)
edge s7 -> s11: (= (mod t 2) 0)
edge s8 -> s2: (and (= (mod t 3) 0) (= (mod t 5) 1))
edge s8 -> s7: (not (= (mod t 3) 1))
edge s8 -> s12: (1)
edge s9 -> s0: (and (= (mod t 3) 2) (= (mod t 5) 4))
edge s9 -> s3: (9,11,19)
edge s9 -> s4: (or (= (mod t 3) 1) (= (mod t 3) 1))
edge s9 -> s11: (not (= (mod t 3) 1))
edge s10 -> s2: (not (= (mod t 4) 0))
edge s10 -> s4: (and (= (mod t 3) 2) (= (mod t 5) 3))
edge s10 -> s8: (= (mod t 5) 3)
edge s10 -> s9
edge s10 -> s12: (= (mod t 2) 0)
edge s11 -> s0: (11,15,17)
edge s11 -> s1: (= (mod t 2) 0)
edge s11 -> s2: (not (= (mod t 6) 1))
edge s11 -> s3
edge s11 -> s4: (not (= (mod t 4) 1))
edge s11 -> s6: (4,10)
edge s11 -> s8: (and (= (mod t 4) 3) (= (mod t 4) 2))
edge s11 -> s9
edge s11 -> s10: (or (= (mod t 2) 1) (= (mod t 4) 3))
edge s12 -> s2
edge s12 -> s3
edge s12 -> s5: (or (= (mod t 4) 0) (= (mod t 5) 2))
