// Complex graph with 13 nodes

node s0: label["start"], owner[1]
node s1: label["b"], owner[1]
node s2: label["state2"], owner[0]
node s3: label["state3"], owner[1]
node s4: label["state4"], owner[0]
node s5: label["n5"], owner[1]
node s6: label["state6"], owner[1]
node s7: label["h"], owner[0]
node s8: label["n8"], owner[1]
node s9: label["j"], owner[0]
node s10: label["k"], owner[1]
node s11: label["n11"], owner[1]
node s12: label["target"], owner[0]

edge s0 -> s3
edge s0 -> s4
edge s0 -> s5: (= (mod t 2) 0)
edge s0 -> s6: (= (mod t 5) 0)
edge s0 -> s8
edge s0 -> s11
edge s1 -> s2: (= (mod t 7) 2)
edge s1 -> s6: (4,5,9,13,18)
edge s1 -> s7: (5,7,8,13)
edge s1 -> s9: (= (mod t 7) 2)
edge s1 -> s12: (and (= (mod t 3) 0) (= (mod t 4) 3))
edge s2 -> s4: (= (mod t 5) 1)
edge s2 -> s7
edge s3 -> s0: (3,14)
edge s3 -> s1: (= (mod t 7) 5)
edge s3 -> s4: (3,6)
edge s4 -> s2: (= (mod t 5) 4)
edge s4 -> s7: (not (= (mod t 4) 0))
edge s4 -> s8: (1,15)
edge s4 -> s9: (and (= (mod t 4) 0) (= (mod t 4) 3))
edge s4 -> s10: (8,12,16,18)
edge s5 -> s0: (3,10,18)
edge s5 -> s4: (= (mod t 2) 1)
edge s5 -> s6: (not (= (mod t 3) 2))
edge s5 -> s9: (3)
edge s5 -> s11: (= (mod t 2) 1)
edge s6 -> s1: (= (mod t 2) 0)
edge s6 -> s7: (= (mod t 8) 6)
edge s6 -> s9: (= (mod t 5) 4)
edge s7 -> s4: (10,11)
edge s7 -> s6: (0,4)
edge s7 -> s8: (and (= (mod t 2) 1) (= (mod t 5) 0))
edge s8 -> s0: (and (= (mod t 3) 0) (= (mod t 3) 0))
edge s8 -> s2
edge s8 -> s5: (or (= (mod t 5) 0) (= (mod t 4) 0))
edge s8 -> s6: (or (= (mod t 4) 2) (= (mod t 3) 2))
edge s8 -> s10
edge s9 -> s4: (= (mod t 2) 1)
edge s9 -> s7: (and (= (mod t 2) 0) (= (mod t 4) 0))
edge s9 -> s12: (4)
edge s10 -> s0: (and (= (mod t 3) 0) (= (mod t 3) 2))
edge s10 -> s6: (= (mod t 2) 1)
edge s11 -> s0: (10,20,22,27,28)
edge s11 -> s4: (and (= (mod t 2) 0) (= (mod t 5) 3))
edge s11 -> s8: (1,8,13,18,23)
edge s12 -> s2
edge s12 -> s4: (and (= (mod t 3) 0) (= (mod t 3) 0))
edge s12 -> s8: (not (= (mod t 2) 1))
edge s12 -> s9: (10)
edge s12 -> s10: (or (= (mod t 2) 0) (= (mod t 4) 0))
