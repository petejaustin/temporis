// Complex graph with 12 nodes

node s0: label["start"], owner[0]
node s1: label["n1"], owner[0]
node s2: label["state2"], owner[1]
node s3: label["state3"], owner[0]
node s4: label["e"], owner[1]
node s5: label["n5"], owner[0]
node s6: label["n6"], owner[0]
node s7: label["h"], owner[0]
node s8: label["state8"], owner[1]
node s9: label["n9"], owner[1]
node s10: label["k"], owner[1]
node s11: label["target"], owner[1]

edge s0 -> s1: (not (= (mod t 3) 1))
edge s0 -> s8: (or (= (mod t 5) 3) (= (mod t 2) 1))
edge s1 -> s10
edge s2 -> s1: (and (= (mod t 4) 2) (= (mod t 5) 2))
edge s2 -> s3: (8,9,19,20)
edge s2 -> s8
edge s2 -> s11: (0,1,15)
edge s3 -> s2: (not (= (mod t 5) 4))
edge s3 -> s8: (or (= (mod t 2) 0) (= (mod t 2) 0))
edge s4 -> s6: (2,3,8,11,14)
edge s4 -> s7: (not (= (mod t 6) 4))
edge s5 -> s1: (= (mod t 5) 3)
edge s5 -> s6: (not (= (mod t 5) 1))
edge s6 -> s1
edge s6 -> s5: (or (= (mod t 4) 3) (= (mod t 5) 4))
edge s6 -> s7: (= (mod t 2) 1)
edge s6 -> s8: (or (= (mod t 4) 3) (= (mod t 3) 1))
edge s6 -> s11: (not (= (mod t 5) 4))
edge s7 -> s9: (not (= (mod t 6) 2))
edge s8 -> s6: (not (= (mod t 3) 2))
edge s8 -> s7
edge s8 -> s11: (or (= (mod t 2) 0) (= (mod t 5) 1))
edge s9 -> s0
edge s9 -> s4: (and (= (mod t 3) 1) (= (mod t 3) 1))
edge s9 -> s6
edge s9 -> s7: (not (= (mod t 6) 1))
edge s9 -> s11: (and (= (mod t 3) 0) (= (mod t 3) 2))
edge s10 -> s1: (and (= (mod t 4) 3) (= (mod t 5) 3))
edge s10 -> s4
edge s10 -> s11
edge s11 -> s3: (1,9)
edge s11 -> s4: (not (= (mod t 5) 2))
edge s11 -> s8: (or (= (mod t 3) 1) (= (mod t 4) 2))
edge s11 -> s10: (= (mod t 6) 3)
