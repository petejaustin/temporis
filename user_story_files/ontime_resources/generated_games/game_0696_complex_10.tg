// Complex graph with 10 nodes

node s0: label["start"], owner[1]
node s1: label["state1"], owner[0]
node s2: label["c"], owner[1]
node s3: label["n3"], owner[0]
node s4: label["n4"], owner[1]
node s5: label["state5"], owner[1]
node s6: label["state6"], owner[1]
node s7: label["h"], owner[0]
node s8: label["n8"], owner[0]
node s9: label["target"], owner[1]

edge s0 -> s1: (= (mod t 5) 2)
edge s0 -> s3: (not (= (mod t 4) 1))
edge s0 -> s5
edge s0 -> s8
edge s2 -> s0
edge s2 -> s3: (10,12,16)
edge s2 -> s4: (3,5,7,17)
edge s2 -> s6: (or (= (mod t 5) 1) (= (mod t 5) 0))
edge s2 -> s8: (or (= (mod t 3) 1) (= (mod t 2) 1))
edge s3 -> s1
edge s3 -> s8: (3,17,18)
edge s4 -> s0: (= (mod t 4) 3)
edge s4 -> s1: (and (= (mod t 3) 2) (= (mod t 4) 0))
edge s4 -> s5: (or (= (mod t 4) 1) (= (mod t 2) 0))
edge s5 -> s1: (= (mod t 5) 0)
edge s5 -> s6
edge s5 -> s9: (and (= (mod t 4) 3) (= (mod t 3) 1))
edge s6 -> s0: (or (= (mod t 4) 0) (= (mod t 5) 1))
edge s6 -> s7: (0,3)
edge s7 -> s2: (or (= (mod t 5) 0) (= (mod t 4) 2))
edge s8 -> s6: (and (= (mod t 4) 1) (= (mod t 3) 2))
edge s8 -> s7: (not (= (mod t 2) 0))
edge s8 -> s9: (0)
edge s9 -> s0: (not (= (mod t 3) 1))
edge s9 -> s1: (= (mod t 6) 0)
edge s9 -> s7: (not (= (mod t 5) 3))
