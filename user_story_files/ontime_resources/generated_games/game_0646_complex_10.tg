// Complex graph with 10 nodes

node s0: label["start"], owner[0]
node s1: label["n1"], owner[1]
node s2: label["c"], owner[0]
node s3: label["state3"], owner[1]
node s4: label["n4"], owner[0]
node s5: label["f"], owner[1]
node s6: label["g"], owner[0]
node s7: label["state7"], owner[0]
node s8: label["n8"], owner[1]
node s9: label["target"], owner[0]

edge s0 -> s8
edge s0 -> s9
edge s1 -> s2: (not (= (mod t 2) 0))
edge s1 -> s4: (and (= (mod t 2) 0) (= (mod t 3) 2))
edge s1 -> s5: (= (mod t 8) 5)
edge s2 -> s3: (and (= (mod t 4) 2) (= (mod t 5) 2))
edge s2 -> s9: (or (= (mod t 3) 0) (= (mod t 5) 2))
edge s3 -> s0: (or (= (mod t 2) 0) (= (mod t 4) 0))
edge s3 -> s6: (and (= (mod t 2) 0) (= (mod t 5) 0))
edge s3 -> s8: (0,5,6,12)
edge s4 -> s0
edge s5 -> s8: (1,8,19)
edge s6 -> s0: (not (= (mod t 6) 1))
edge s6 -> s1: (= (mod t 4) 1)
edge s6 -> s5: (and (= (mod t 4) 3) (= (mod t 3) 0))
edge s6 -> s7: (= (mod t 5) 3)
edge s7 -> s0: (or (= (mod t 3) 2) (= (mod t 5) 4))
edge s7 -> s1: (not (= (mod t 2) 1))
edge s7 -> s2: (and (= (mod t 4) 0) (= (mod t 5) 1))
edge s7 -> s4: (= (mod t 5) 2)
edge s7 -> s6: (not (= (mod t 5) 0))
edge s8 -> s1: (or (= (mod t 5) 2) (= (mod t 3) 2))
edge s8 -> s4: (or (= (mod t 2) 0) (= (mod t 4) 1))
edge s8 -> s6: (not (= (mod t 4) 1))
edge s9 -> s2: (and (= (mod t 3) 2) (= (mod t 5) 2))
