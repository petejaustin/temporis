// Complex graph with 9 nodes

node s0: label["start"], owner[1]
node s1: label["b"], owner[0]
node s2: label["n2"], owner[0]
node s3: label["n3"], owner[1]
node s4: label["n4"], owner[0]
node s5: label["state5"], owner[1]
node s6: label["state6"], owner[0]
node s7: label["state7"], owner[1]
node s8: label["target"], owner[0]

edge s0 -> s1: (= (mod t 4) 0)
edge s0 -> s6: (0,3,14)
edge s0 -> s8: (1,3,8,10,11)
edge s1 -> s0
edge s2 -> s1: (= (mod t 7) 1)
edge s2 -> s3: (or (= (mod t 2) 0) (= (mod t 4) 2))
edge s2 -> s8: (3,7,9,10)
edge s3 -> s0: (or (= (mod t 4) 0) (= (mod t 3) 0))
edge s3 -> s1: (or (= (mod t 4) 1) (= (mod t 2) 0))
edge s3 -> s7: (= (mod t 8) 3)
edge s4 -> s5: (and (= (mod t 4) 0) (= (mod t 5) 4))
edge s4 -> s6: (14)
edge s5 -> s2: (or (= (mod t 3) 2) (= (mod t 2) 1))
edge s5 -> s3: (= (mod t 5) 3)
edge s5 -> s7: (not (= (mod t 3) 2))
edge s6 -> s0
edge s6 -> s1: (not (= (mod t 4) 1))
edge s6 -> s8: (and (= (mod t 3) 2) (= (mod t 3) 1))
edge s7 -> s2: (or (= (mod t 2) 0) (= (mod t 2) 1))
edge s7 -> s8
edge s8 -> s0: (= (mod t 5) 3)
edge s8 -> s1: (or (= (mod t 5) 0) (= (mod t 3) 1))
edge s8 -> s2: (and (= (mod t 3) 0) (= (mod t 4) 0))
edge s8 -> s3
