// Complex graph with 11 nodes

node s0: label["start"], owner[1]
node s1: label["b"], owner[1]
node s2: label["n2"], owner[1]
node s3: label["n3"], owner[1]
node s4: label["e"], owner[1]
node s5: label["n5"], owner[0]
node s6: label["state6"], owner[0]
node s7: label["n7"], owner[0]
node s8: label["n8"], owner[0]
node s9: label["state9"], owner[1]
node s10: label["target"], owner[0]

edge s0 -> s1: (= (mod t 8) 2)
edge s0 -> s2: (= (mod t 3) 0)
edge s0 -> s3: (or (= (mod t 5) 0) (= (mod t 2) 1))
edge s0 -> s6: (1,8)
edge s0 -> s9: (and (= (mod t 2) 1) (= (mod t 4) 2))
edge s1 -> s4: (= (mod t 4) 1)
edge s1 -> s7: (7,11,17,21,22)
edge s2 -> s9: (= (mod t 7) 2)
edge s3 -> s0: (or (= (mod t 3) 0) (= (mod t 2) 1))
edge s4 -> s5: (and (= (mod t 4) 3) (= (mod t 4) 3))
edge s4 -> s9: (or (= (mod t 5) 0) (= (mod t 5) 1))
edge s5 -> s3
edge s5 -> s9: (or (= (mod t 2) 0) (= (mod t 5) 3))
edge s6 -> s2: (= (mod t 8) 3)
edge s6 -> s3: (and (= (mod t 4) 0) (= (mod t 5) 3))
edge s7 -> s1
edge s7 -> s4: (10,12,14)
edge s7 -> s8: (or (= (mod t 2) 0) (= (mod t 2) 1))
edge s7 -> s10: (and (= (mod t 3) 0) (= (mod t 5) 1))
edge s8 -> s0: (= (mod t 3) 2)
edge s8 -> s2: (or (= (mod t 2) 0) (= (mod t 3) 2))
edge s8 -> s6: (and (= (mod t 2) 1) (= (mod t 4) 0))
edge s8 -> s9
edge s9 -> s1: (not (= (mod t 2) 0))
edge s9 -> s6: (1,19)
edge s10 -> s6: (= (mod t 4) 3)
edge s10 -> s8: (= (mod t 4) 0)
