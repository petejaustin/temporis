// Complex graph with 10 nodes

node s0: label["start"], owner[0]
node s1: label["n1"], owner[1]
node s2: label["state2"], owner[1]
node s3: label["state3"], owner[0]
node s4: label["state4"], owner[1]
node s5: label["state5"], owner[1]
node s6: label["n6"], owner[0]
node s7: label["h"], owner[1]
node s8: label["i"], owner[0]
node s9: label["target"], owner[1]

edge s0 -> s1
edge s0 -> s3
edge s1 -> s3: (not (= (mod t 6) 0))
edge s1 -> s5: (and (= (mod t 3) 0) (= (mod t 3) 1))
edge s1 -> s7: (and (= (mod t 2) 1) (= (mod t 5) 1))
edge s2 -> s7: (and (= (mod t 4) 1) (= (mod t 5) 4))
edge s3 -> s7: (and (= (mod t 3) 2) (= (mod t 4) 2))
edge s4 -> s7: (not (= (mod t 5) 2))
edge s5 -> s2: (and (= (mod t 4) 1) (= (mod t 4) 3))
edge s5 -> s3: (= (mod t 4) 0)
edge s5 -> s8: (and (= (mod t 4) 0) (= (mod t 5) 3))
edge s5 -> s9: (= (mod t 7) 4)
edge s6 -> s0: (and (= (mod t 3) 2) (= (mod t 3) 2))
edge s6 -> s4: (and (= (mod t 3) 1) (= (mod t 3) 1))
edge s6 -> s8: (and (= (mod t 3) 2) (= (mod t 3) 0))
edge s6 -> s9: (or (= (mod t 2) 1) (= (mod t 2) 0))
edge s7 -> s1: (= (mod t 3) 1)
edge s8 -> s0: (or (= (mod t 2) 1) (= (mod t 5) 2))
edge s8 -> s1: (or (= (mod t 5) 2) (= (mod t 4) 3))
edge s8 -> s2: (and (= (mod t 2) 1) (= (mod t 5) 0))
edge s8 -> s5: (or (= (mod t 3) 1) (= (mod t 3) 2))
edge s8 -> s7: (17)
edge s9 -> s5: (and (= (mod t 3) 1) (= (mod t 3) 0))
edge s9 -> s7: (not (= (mod t 3) 1))
